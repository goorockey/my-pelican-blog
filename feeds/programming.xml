<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Goorockey's Blog</title><link href="http://www.goorockey.com/" rel="alternate"></link><link href="http://www.goorockey.com/feeds/programming.xml" rel="self"></link><id>http://www.goorockey.com/</id><updated>2014-04-21T10:41:00+08:00</updated><entry><title>用wxWidgets做移植的总结</title><link href="http://www.goorockey.com/blog/2014/04/21/yong-wxwidgetszuo-yi-zhi-de-zong-jie/" rel="alternate"></link><updated>2014-04-21T10:41:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2014-04-21:blog/2014/04/21/yong-wxwidgetszuo-yi-zhi-de-zong-jie/</id><summary type="html">
&lt;p&gt;这几个月做的项目是把一个承载在MFC的软件从Windows移植到Mac，现在进入最后验收阶段了。当时网上调研了一下，决定用&lt;a href="http://www.wxwidgets.org" title="wxWidgets"&gt;wxWidgets&lt;/a&gt;这个跨平台的开源库来帮助移植。总的来说，只要把原软件对Windows API的调用都改为对wxWidgets的调用，基本就完成了移植。但基于wxWidgets和MFC一些设计上的差异和原软件特殊的功能，还不是简单的全局替换就能了事的，甚至还得改wxWidgets的源码。&lt;/p&gt;
&lt;p&gt;wxWidgets库在总的结构上跟MFC相似，比如消息响应、相关类的命名。它现在已经出到了3.0，总体还是比较成熟了，但还是好些不完善的地方，这个在看它源码的时候就会发现挺多TODO comment。不过它的官方论坛和stackoverflow上相关问题还是挺活跃的，在上面提问很快就能得到一些资深程序员的答复。有一次我误以为发现了它的一个bug（其实是我理解错了），在上面提问，回复的人不仅有文字的讲解，还附上了自己写的测试用例，让我真心赞叹对方好负责任啊。&lt;/p&gt;
&lt;p&gt;现在总结一些项目移植过程中遇到的问题吧。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id="wxrectcrect"&gt;wxRect和CRect&lt;/h2&gt;
&lt;p&gt;Windows的CRect要替换成wxWidgets的wxRect真不能简单的替换，因为两者内部设计不一样。&lt;/p&gt;
&lt;p&gt;第一，两者对应接口的入参有不同，最经典的是两者的构造函数，CRect是传left,top,right,bottom，wxWidgets是传left,top,width,height，等于说所有构造CRect的地方都要把第三、第四个参数做减法。&lt;/p&gt;
&lt;p&gt;第二，wxRect定义自己所表示的矩形，范围是[left, right - 1]和[top, bottom - 1]，意思就是右边界和下边界是不属于矩形一部分的，这个从其源码能看到。官方说法是不承认width或height为1的矩形，那应该视为线段。这在移植一些矩形操作时，会跟CRect的有些差异。&lt;/p&gt;
&lt;p&gt;第三，也是我觉得最坑的，CRect内部直接保存left,top,right,bottom来定义矩形，而wxRect内部保存left,top,width,height来定义矩形，即wxWidgets要GetRight的时候，是返回left + width，SetRight的时候set的是width，其他的同理。这看着没什么问题。但如果我们先SetRight，再SetLeft，wxRect的行为就跟CRect的不一样了。&lt;/p&gt;
&lt;p&gt;例如对一个(left,top,right,bottom)=(1,1,5,5)的CRect，对应的wxRect是(left,top,width,height)=(1,1,4,4)，我们对其依次执行SetRight(10)和SetLeft(3)，得到CRect是(left,top,right,bottom)=(3,1,10,5)，wxRect是(left,top,width,height)=(3,1,9,4)，换算过来wxRect是(left,top,right,bottom)=(3,1,12,5)，跟得到的CRect不同！原因就是SetLeft的时候，wxRect只改left，没改width，但等于right还是改了，其实是使整个矩形做了偏移；CRect的行为则是修改左边界，右边界不会动，其实是使整个矩形做压缩。真是坑啊！注意到这一点之后，原软件每个连续SetLeft、SetRight，SetTop、SetBottom的地方，都要注意执行的顺序。&lt;/p&gt;
&lt;p&gt;鉴于wxRect和CRect以上的差异，其实移植的时候最好的做法是自己写一个封装了wxRect的MyRect类，把wxRect和CRect的差异在MyRect里面做转换。这其实是应用了Adaptor Pattern。&lt;/p&gt;
&lt;h2 id="macwxbitmapwxclipboardalpha"&gt;Mac下wxBitmap在剪切板wxClipboard取回时，Alpha信息丢失&lt;/h2&gt;
&lt;p&gt;wxWidgets在从剪切板wxClipboard取回图片数据wxBitmapDataObject时，会丢失了透明信息，即Alpha channel。具体来看就是原来用RGBA表示的有透明信息的图片，通过剪切板传递之后，RGBA的A都变成255了。&lt;/p&gt;
&lt;p&gt;我通过查看wxWidgets的源码，发现确实是个bug，wxWidgets在Mac这边调用Cocoa接口从剪切板获取像素数据保存为图片时，没有关注Alpha channel。这个我通过修改它源码解决了。详见我提交到官方的这个&lt;a href="http://trac.wxwidgets.org/ticket/16198"&gt;ticket&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="wxdcunix"&gt;wxDC在Unix下不是线程安全的&lt;/h2&gt;
&lt;p&gt;wxDC是wxWidgets的绘制上下文，对应于Windows下的CDC。官方资料说了，wxDC在Unix平台下是非线程安全的。这里指的Unix平台具体是GTK(Linux)和OSX(Mac)。所以绘制的时候最好是下wxPaintEvent的响应函数里面做。在子线程做绘制不保证正确，即使是用wxWidgets的wxGuiEnter/wxGuiLeave加锁也是不行。&lt;/p&gt;
&lt;h2 id="_1"&gt;对话框资源的移植&lt;/h2&gt;
&lt;p&gt;在MFC中，对话框资源都保存在rc文件中。而对应到wxWidgets，每个对话框以xml格式保存成各自的xrc文件，跟rc有一定区别。MFC大部分控件在wxWidgets都能找到。对于对话框资源的移植，我们是用脚本批量完成的，中间一个坑是转换时候对话框和控件的大小在MFC的rc和wxWidgets的xrc不是1:1的，要乘一个比例，1.5左右。&lt;/p&gt;
&lt;h2 id="all-in-all"&gt;ALL IN ALL&lt;/h2&gt;
&lt;p&gt;以上是暂时记得的问题。总的来说，wxWidgets是个强大的跨平台库，用着真心方便，常用的操作也都覆盖了，代码也整洁漂亮，社区也活跃，还是可以放心选用的。而且作为一个开源库，有什么问题都能自己定位自己修改解决，开源万岁～&lt;/p&gt;</summary><category term="programming"></category><category term="wxwidgets"></category><category term="cpp"></category></entry><entry><title>用Web-Harvest抓腾讯微博</title><link href="http://www.goorockey.com/blog/2014/03/05/yong-web-harvestzhua-teng-xun-wei-bo/" rel="alternate"></link><updated>2014-03-05T21:31:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2014-03-05:blog/2014/03/05/yong-web-harvestzhua-teng-xun-wei-bo/</id><summary type="html">
&lt;p&gt;好久没更新博客，水一文。&lt;/p&gt;
&lt;p&gt;前阵子要给别人出试题，偶然发现&lt;a href="下称WH"&gt;Web-Harvest&lt;/a&gt;这个抓网页的工具，它主要应用xpath和xquery抓网页，内置还定义了一套功能挺多的语法，就出了一道用WH抓微博的题目。&lt;/p&gt;
&lt;p&gt;本来想抓新浪微博的，但发现它的微博内容都是js生成的，折腾了一下，还是可以用WH的函数提取出内容，但腾讯微博相对还是简单多了。&lt;/p&gt;
&lt;p&gt;题目其中一个内容是用WH抓几页邓紫棋的腾讯微博，排除包含她演唱会广告的和没有图片的微博。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;其中遇到的坑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为是包含中文，写入到文件时要用gbk编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在xpath已经用li[@id]获取微博节点，但节点传到xquery里面时竟然还要再一次用li[@id]获取一级&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置文件如下&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/goorockey/9368146.js"&gt;&lt;/script&gt;&lt;/p&gt;</summary><category term="programming"></category><category term="Web-Harvest"></category></entry><entry><title>面试趣题</title><link href="http://www.goorockey.com/blog/2011/08/24/mian-shi-qu-ti/" rel="alternate"></link><updated>2011-08-24T00:00:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2011-08-24:blog/2011/08/24/mian-shi-qu-ti/</id><summary type="html">
&lt;h3 id="_1"&gt;题一、有一个整数数组，请求出两两之差绝对值最小的值&lt;/h3&gt;
&lt;p&gt;方法：先排序，再找差值最小的点对。&lt;/p&gt;
&lt;p&gt;效率：时间复杂度O(nlogn)&lt;/p&gt;
&lt;h3 id="n"&gt;题二、平面上N个点，每两个点都确定一条直线，求出斜率最大的那条直线所通过的两个点（斜率不存在的情况不考虑）&lt;/h3&gt;
&lt;p&gt;方法：根据x排序，用图解枚举所有情况，能证明斜率最大的两点肯定是相邻的两点。&lt;/p&gt;
&lt;p&gt;效率：时间复杂度O(nlogn)&lt;/p&gt;
&lt;h3 id="f2ff"&gt;题三、一棵排序二叉树，令 f=(最大值+最小值)/2，设计一个算法，找出距离f值最近、大于f值的结点&lt;/h3&gt;
&lt;p&gt;方法：把f插入，中序排序&lt;/p&gt;
&lt;p&gt;效率：时间复杂度O(logn)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id="_2"&gt;题四、找出两个字符串中最大公共子字符串&lt;/h3&gt;
&lt;p&gt;如"abccade","dgcadde"的最大子串为"cad"&lt;/p&gt;
&lt;p&gt;&lt;em&gt;方法一：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从字符串一中遍历子串，并在字符串二中匹配。时间复杂度为O(n^3)。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;方法二：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;矩阵法：用矩阵表示两字符串，横竖字符相同的格置1，则在45度方向连续1最多的就是所求，时间复杂度O(n^2) 。&lt;/p&gt;
&lt;h3 id="_3"&gt;题五、检查单向链表中是否有环&lt;/h3&gt;
&lt;p&gt;这算是经典的面试题了，记录一下好的解法和推广。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;方法一：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;操作：把链表反向，当游标指针回到首节点时表示有环，否则无环。&lt;/p&gt;
&lt;p&gt;解释：如果有环，把链表反向后，游标指针会从环内回到环外，最后回到首节点。&lt;/p&gt;
&lt;p&gt;效率：时间复杂度O(n)，空间复杂度O(1)。&lt;/p&gt;
&lt;p&gt;不足：破坏原链表的结构，需要再遍历一次链表来恢复链表结构。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;方法二:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;两个游标指针,一个慢指针每次移动一个节点，一个快指针每次移动两个节点。如果在快指针遍历到链表结尾前遇到慢指针，则链表有环，否则无环。&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;如果有环，当慢指针刚进入环时，设快指针与慢指针的距离为n（距离指慢指针不动是，快指针要经过几次节点达到慢指针），由于快指针每次都追上慢指针一个节点，则两者经过n次后总会相遇。&lt;/p&gt;
&lt;p&gt;效率：时间复杂度O(n)， 空间复杂度O(1)。&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/goorockey/3712175.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;推广一：有环单向链表中环的节点数&lt;/h3&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;还是用快慢指针，当快慢指针在环内相遇后，两指针继续移动，并对慢指针移动的节点计数。当两指针再次相遇时，计数的结果就是环的节点数。&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;还是题一中的思想。设环的节点数为n，当两指针第一次相遇时，可看做两指针的距离为n，则再慢指针再经过n个节点后，两指针会再次相遇，所以慢指针移动的节点数就是环的节点数。&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/goorockey/3712217.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;推广二、找到有环单向链表中环首节点&lt;/h3&gt;
&lt;p&gt;如以下有环单向链表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即第9节点的next指针指向第4节点，则环的首节点为第4节点&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;先计算环的节点数&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="err"&gt;两个前后指针，前指针先移动&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;个节点，然后两指针一齐移动，每次都只移动一个的节点。&lt;/span&gt;
&lt;span class="err"&gt;当两指针相遇时，两指针指向的节点就是所求的环首节点。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：因为开始两指针相距n个节点，当后指针刚进入环时，肯定会与前指针在环的首节点相遇。&lt;/p&gt;
&lt;h3 id="_6"&gt;推广三、破坏有环单向链表的环&lt;/h3&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;在上面的基础上，当找到了环首节点和环内节点数n后，只要从环首节点移动n到达环的尾节点，修改环尾节点的next指针即可。&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/goorockey/3712226.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;题五、找到有序链表的中位值&lt;/h3&gt;
&lt;p&gt;常规方法：遍历一次链表得到链表长度length，再遍历一次链表到length/2的位置即为中位值&lt;/p&gt;
&lt;p&gt;更好的方法：用两个指针p1、p2，p1每次走两步，p2每次走一步，等到p1到链表尾时，p2所指即为中位值&lt;/p&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/goorockey/3824662.js"&gt;&lt;/script&gt;&lt;/p&gt;</summary><category term="programming"></category><category term="面试"></category></entry><entry><title>不用除法运算符实现除法及其推广</title><link href="http://www.goorockey.com/blog/2011/08/22/bu-yong-chu-fa-yun-suan-fu-shi-xian-chu-fa-ji-qi-tui-yan/" rel="alternate"></link><updated>2011-08-22T00:00:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2011-08-22:blog/2011/08/22/bu-yong-chu-fa-yun-suan-fu-shi-xian-chu-fa-ji-qi-tui-yan/</id><summary type="html">
&lt;p&gt;两个正整数x、y，x是y的倍数，不用除法运算符实现x / y。&lt;/p&gt;
&lt;p&gt;1、最简单的方法&lt;/p&gt;
&lt;p&gt;循环用x减y，知道x等于0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;2、用移位实现&lt;/p&gt;
&lt;p&gt;与很多优化算法相似，用2次幂实现加速。&lt;/p&gt;
&lt;p&gt;考虑到x是y的倍数，设x = y * k&lt;/p&gt;
&lt;p&gt;因为我们可以用二进制表示任意整数，所以任意整数都可表示成2次幂的和，即：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以有x = y * (2^t1 + 2^t2 + … + 2^tn)，即我们要的结果就是2^t1 + 2^t2 + … + 2^tn&lt;/p&gt;
&lt;p&gt;由此，我们可以先找到一个刚好不大于x的s1 = y*(2^t1)，即有&lt;code&gt;y*2^t1 &amp;lt;= x &amp;lt; y*2^(t1+1)&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;然后令x2 = x - s1 = y * (2^t2 + … + 2^tn)，从而继续递归直到xn – sn = 0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// 2次幂计数器&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 中间乘积，等于y*2^t，即product = y * i&lt;/span&gt;

    &lt;span class="c1"&gt;// 找到刚好不大于x的product = y*i满足y*i &amp;lt;= x &amp;lt; y*(i+1)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 递归得到结果&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// product自除2来寻找新的product，满足刚好不大于x&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// 累加结果result = 2^t1 + 2^t2 … + 2^t(k-1)&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 相减得到新的x = y*(2^tk + … + 2^tn)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度&lt;code&gt;O(logn)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、推广 - 不用开方运算符求幂数：&lt;/p&gt;
&lt;p&gt;两个正整数x、y，不用开方运算符求x是y的几次幂。&lt;/p&gt;
&lt;p&gt;思想与方法二类似。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include "math.h"&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时间复杂度&lt;code&gt;O(logn)&lt;/code&gt;&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>自产生程序</title><link href="http://www.goorockey.com/blog/2011/08/08/zi-chan-sheng-cheng-xu/" rel="alternate"></link><updated>2011-08-08T00:00:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2011-08-08:blog/2011/08/08/zi-chan-sheng-cheng-xu/</id><summary type="html">
&lt;p&gt;自产生程序：不通过任何输入，输出自己代码的程序。&lt;/p&gt;
&lt;p&gt;很多语言都可以写出这样的程序。&lt;/p&gt;
&lt;p&gt;C版本(只有一行)：   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"char s[] = %c%s%c;int main(){ printf(s, 34, s, 34);return 0;}"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然是写出来了，但里面还是有很多值得研究的东西的。 &lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href="http://www.nyx.net/~gthompso/quine.htm"&gt;http://www.nyx.net/~gthompso/quine.htm&lt;/a&gt;&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>小记：不用第三个变量交换两数</title><link href="http://www.goorockey.com/blog/2011/08/06/xiao-ji-bu-yong-di-san-ge-bian-liang-jiao-huan-liang-shu/" rel="alternate"></link><updated>2011-08-06T00:00:00+08:00</updated><author><name>goorockey</name></author><id>tag:www.goorockey.com,2011-08-06:blog/2011/08/06/xiao-ji-bu-yong-di-san-ge-bian-liang-jiao-huan-liang-shu/</id><summary type="html">
&lt;p&gt;经典的解法1:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a变成a+b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// b变成原来的a，因为a+b-b = a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a变成原来的b，因为a+b-a = b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;存在的问题: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;太大的话会溢出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经典的解法2:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a变成a^b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// b变成原来的a，因为b^(a^b) = a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a变成原来的b，因为a^(a^b) = b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;存在的问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;的值不能超过对方的位数所能表达的范围&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如下面这种情况就会出问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x10101010&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 设此时int为4个字节&lt;/span&gt;
&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个问题已经老生常谈了，不过今天还是遇到一个问题：&lt;/p&gt;
&lt;p&gt;当两个要交换的数其实是同一个变量（更准确的说是同一个内存）时两种解法都会出错，变量被置0。&lt;/p&gt;
&lt;p&gt;原因自己推算即可得出。 &lt;/p&gt;
&lt;p&gt;所以，我觉得更为保险的方法就是在交换之前先判断a、b是否相等，就既提高效率又防止出错。&lt;/p&gt;</summary><category term="programming"></category></entry></feed>